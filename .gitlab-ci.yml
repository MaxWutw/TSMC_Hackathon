image: $DOCKER_REGISTRY:latest

variables:
  DOCKER_REGISTRY: registry.gitlab.com/maxwutw/tsmc_hackathon
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  # GCP variables
  GCP_PROJECT_ID: tsmccareerhack2025-aaid-grp2
  GCP_REGISTRY_LOCATION: us-central1
  GCP_REGISTRY_NAME: tsmccareerhack2025-aaid-grp2-repository
  # docker image
  VISION_IMAGE: ${GCP_REGISTRY_LOCATION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_REGISTRY_NAME}/visionassistantserver
  FUNCTION_IMAGE: ${GCP_REGISTRY_LOCATION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_REGISTRY_NAME}/functioncallingserver
  # test variables
  PYTHONPATH: ${CI_PROJECT_DIR}
  TEST_REQUIREMENTS: requirements-test.txt

services:
  - docker:dind

stages:
  - install
  - test
  - build
  - deploy

.auth: &auth
  before_script:
    - apk update && apk add jq
    - docker --version
    - echo "$GCP_SERVICE_ACCOUNT_KEY" > /tmp/gcp-key.json
    - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
    - gcloud auth configure-docker ${GCP_REGISTRY_LOCATION}-docker.pkg.dev --quiet
    # - export IMAGE_VERSION=$(cat info.json | jq -r .version || echo "latest")
    - export IMAGE_VERSION=$(echo "latest")

install-dependencies:
  stage: install
  image: python:3.9
  script:
    # - pip install -r requirements-test.txt
    # - if [ -f "$TEST_REQUIREMENTS" ]; then pip install -r $TEST_REQUIREMENTS; fi
    - echo "install dependencies"
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

testing:
  tags:
    - project
  stage: test
  image: python:3.9
  script:
    - pip install pytest requests pillow
    - pip install -r requirements-test.txt
    # Start services
    - cd tool/
    - python3 -m api_service &
    - python3 -m inpainting_service &
    - sleep 5
    - cd ..
    # Run tests
    - cd tests
    - pytest test_inpainting_service.py -v || true
    - pytest test_va_service.py -v || true

build-and-push-docker-image:
  stage: build
  image: google/cloud-sdk:latest
  <<: *auth
  script:
    - echo "$IMAGE_VERSION"
    - docker build --build-arg TARGET_NAME=visionassistant -t $VISION_IMAGE:$IMAGE_VERSION .
    - docker push $VISION_IMAGE:$IMAGE_VERSION
    - docker build --build-arg TARGET_NAME=functioncalling -t $FUNCTION_IMAGE:$IMAGE_VERSION .
    - docker push $FUNCTION_IMAGE:$IMAGE_VERSION

# push-to-registry:
#   stage: publish
#   image: google/cloud-sdk:latest
#   <<: *auth
#   script:
#     - echo "$IMAGE_VERSION"
#     - docker load < vision.tar
#     - docker load < function.tar
#     - docker push $VISION_IMAGE:$IMAGE_VERSION
#     - docker push $FUNCTION_IMAGE:$IMAGE_VERSION
 
# deploy-to-gcp:
#   stage: deploy
#   image: google/cloud.sdk:latest
#   before_script:
#     - echo "$GCP_SERVICE_ACCOUNT_KEY" > /tmp/gcp-key.json
#     - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
#     - gcloud config set project $GCP_PROJECT_ID
#     - gcloud container clusters get-credentials your-cluster-name --zone your-zone --project $GCP_PROJECT_ID
#   script:
#     # - export IMAGE_VERSION=$(cat info.json | jq -r .version || echo "latest")
#     - export IMAGE_VERSION=$(echo "latest")
#     # Apply Kubernetes configurations
#     - kubectl apply -f kubernetes/
#     # Update deployments with new image versions
#     - kubectl set image deployment/vision-assistant-deployment vision-assistant=$VISION_IMAGE:$IMAGE_VERSION
#     - kubectl set image deployment/function-calling-deployment function-calling=$FUNCTION_IMAGE:$IMAGE_VERSION
#     # Verify deployments
#     - kubectl rollout status deployment/vision-assistant-deployment
#     - kubectl rollout status deployment/function-calling-deployment
#     # Output service information
#     - echo "Checking service endpoints..."
#     - kubectl get services
